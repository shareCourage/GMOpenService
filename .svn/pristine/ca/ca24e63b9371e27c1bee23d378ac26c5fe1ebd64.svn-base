//
//  GMNetworkManager.m
//  GMOpenSDK
//
//  Created by Kowloon on 15/6/17.
//  Copyright (c) 2015年 Goome. All rights reserved.
//

#import "GMNetworkManager.h"
#import "GMConstant.h"
#import "NSString+PHCategory.h"
#import "GMTool.h"
@implementation GMNetworkManager
/**
 *  对GMHTTPRequestOperationManager的GET封装
 *
 *  @param url         url ?前面的一部分，eg:https: //www.baidu.com/s  ?wd=textfield
 *  @param parameters  parameters description
 *  @param optionDict  void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorOption void (^GMNetworkError)(NSError *error)#optionError description#>
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)GET:(NSString *)url
                     parameters:(id)parameters
                      dictBlock:(GMOptionDict)optionDict
                     errorBlock:(GMOptionError)optionError
{
    GMHTTPRequestOperationManager *manager = [GMHTTPRequestOperationManager manager];
    manager.responseSerializer = [GMHTTPResponseSerializer serializer];//将数据转化为NSData
    GMHTTPRequestOperation *operation = [manager GET:url parameters:parameters success:^(GMHTTPRequestOperation *operation, id responseObject) {
        NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        if (optionDict) {
            optionDict(dict);
        }
    } failure:^(GMHTTPRequestOperation *operation, NSError *error) {
        if (optionError) {
            optionError(error);
        }
    }];
    return operation;
}

/**
 *  对GMHTTPRequestOperationManager的POST封装
 *
 *  @param url         url ?前面的一部分，eg:https://www.baidu.com/s  ?wd=textfield
 *  @param parameters  parameters description
 *  @param optionDict  void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorOption void (^GMNetworkError)(NSError *error)#optionError description#>
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)POST:(NSString *)url
                      parameters:(id)parameters
                       dictBlock:(GMOptionDict)optionDict
                      errorBlock:(GMOptionError)optionError
{
    GMHTTPRequestOperationManager *manager = [GMHTTPRequestOperationManager manager];
    manager.responseSerializer = [GMHTTPResponseSerializer serializer];//将数据转化为NSData
    GMHTTPRequestOperation *operation = [manager POST:url parameters:parameters success:^(GMHTTPRequestOperation *operation, id responseObject) {
        NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        if (optionDict) {
            optionDict(dict);
        }
    } failure:^(GMHTTPRequestOperation *operation, NSError *error) {
        if (optionError) {
            optionError(error);
        }
    }];
    return operation;
}

#pragma mark - selfForBasicInformation
/**
 *  设备接入及位置信息上传
 *
 *  @param appID       appID description
 *  @param devID       devID description
 *  @param latitude    latitude description
 *  @param longitude   longitude description
 *  @param optionDict  void (^GMOptionDict)(NSDictionary *dict)
 *  @param optionError (^GMOptionError)(NSError *error)
 */
- (GMHTTPRequestOperation *)uploadMyOwnDeviceLocationWithAppID:(NSString *)appID
                                                         devID:(NSString *)devID
                                                      latitude:(NSString *)latitude
                                                     longitude:(NSString *)longitude
                                                     withBlock:(GMOptionDict)optionDict
                                              withFailureBlock:(GMOptionError)optionError
{
    if (devID.length == 0 || appID.length == 0 || latitude == nil || longitude == nil) {
        return nil;
    }
    // @"http: //open.goome.net/1/device/setloc?appid=23&devid=4632434392&gps_time=1366786321&course=0&speed=0&lng=113.91919&lat=22.54546"
    NSDictionary *parameters = @{GM_Argument_appid:appID,
                                 GM_Argument_devid:devID,
                                 GM_Argument_gps_time:GM_CurrentTime,
                                 GM_Argument_course:@"0",
                                 GM_Argument_speed:@"0",
                                 GM_Argument_lat:latitude,
                                 GM_Argument_lng:longitude};
    GMHTTPRequestOperation *operation = [self GET:GM_Setloc_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}
//更新日期:2015.04.10.17:00
/**
 *  设备接入及位置信息上传 (完整参数,添加course,speed,time)
 *
 *  @param appID       appID description
 *  @param devID       devID description
 *  @param latitude    latitude description
 *  @param longitude   longitude description
 *  @param course       course description
 *  @param speed        speed description
 *  @param time        time description
 *  @param optionDict  void (^GMOptionDict)(NSDictionary *dict)
 *  @param optionError (^GMOptionError)(NSError *error)
 */
- (GMHTTPRequestOperation *)uploadMyOwnDeviceLocationWithAppID:(NSString *)appID
                                                         devID:(NSString *)devID
                                                      latitude:(NSString *)latitude
                                                     longitude:(NSString *)longitude
                                                        course:(NSString *)course
                                                         speed:(NSString *)speed
                                                          time:(NSString *)time
                                                     withBlock:(GMOptionDict)optionDict
                                              withFailureBlock:(GMOptionError)optionError
{
    if (devID.length == 0 || appID.length == 0 || latitude == nil || longitude == nil || time == nil) {
        return nil;
    }
    // @"http: //open.goome.net/1/device/setloc?appid=23&devid=4632434392&gps_time=1366786321&course=0&speed=0&lng=113.91919&lat=22.54546"
    NSDictionary *parameters = @{GM_Argument_appid:appID,
                                 GM_Argument_devid:devID,
                                 GM_Argument_gps_time:time,
                                 GM_Argument_course:course,
                                 GM_Argument_speed:speed,
                                 GM_Argument_lat:latitude,
                                 GM_Argument_lng:longitude};
    GMHTTPRequestOperation *operation = [self GET:GM_Setloc_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

//TODO: 7.27添加
- (GMHTTPRequestOperation *)uploadMyOwnDeviceLocationWithAppID:(NSString *)appID
                                                        device:(id<GMDevice>)device
                                                       mapType:(NSString *)mapType
                                                     withBlock:(GMOptionDict)optionDict
                                              withFailureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || ![device conformsToProtocol:@protocol(GMDevice)]) return nil;
    if (device.devid.length == 0 || device.gps_time.length == 0) return nil;
    NSMutableDictionary *mpara = [self deviceParameters:device];
    [mpara setObject:appID forKey:GM_Argument_appid];
    if (mapType.length != 0) [mpara setObject:mapType forKey:GM_Argument_map_type];
    GMHTTPRequestOperation *operation = [self GET:GM_Setloc_URL parameters:mpara dictBlock:optionDict errorBlock:optionError];
    return operation;
}
/**
 *  设备接入及位置信息上传(批量信息上传)
 *
 *  @param appID       appID description
 *  @param devIDs      devIDs 一个数组，里面存储模型，但这个模型必须遵行GMGoomeOpenBasicInfo协议
 *  @param optionDict  void (^GMOptionDict)(NSDictionary *dict)
 *  @param optionError (^GMOptionError)(NSError *error)
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)uploadMuchOfDeviceLocationWithAppID:(NSString *)appID
                                                         devIDs:(NSArray *)devIDs
                                                        mapType:(NSString *)mapType
                                                      withBlock:(GMOptionDict)optionDict
                                               withFailureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || devIDs.count == 0) return nil;
    NSMutableArray *array = [NSMutableArray array];
    for (id obj in devIDs) {
        if (![obj conformsToProtocol:@protocol(GMDevice)]) return nil;
        [array addObject:[self deviceParameters:obj]];
    }
    NSDictionary *dict = @{GM_Argument_appid:appID,
                           GM_Argument_data:array};
    NSMutableDictionary *mDict = [NSMutableDictionary dictionaryWithDictionary:dict];
    if (mapType.length != 0) [mDict setObject:mapType forKey:GM_Argument_map_type];
    __autoreleasing NSError *error = nil;
    NSData *data = [NSJSONSerialization dataWithJSONObject:mDict options:NSJSONWritingPrettyPrinted error:&error];
    if (error) return nil;
    NSString *parameters = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    GMHTTPRequestOperation *operation = [self POST:GM_Setloc_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

//TODO: 7.27添加
- (NSMutableDictionary *)deviceParameters:(id<GMDevice>)device
{
    NSMutableDictionary *mpara =    [NSMutableDictionary dictionary];
    //devid
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_devid]) {
        if (device.devid.length != 0)   [mpara setObject:device.devid forKey:GM_Argument_devid];
    }
    
    //gps_time
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_gps_time]) {
        if (device.gps_time.length != 0){
            NSNumber *number = [NSNumber numberWithDouble:[device.gps_time doubleValue]];
            [mpara setObject:number forKey:GM_Argument_gps_time];
        }
    }
    
    //lat
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_lat]) {
        if (device.lat.length != 0) {
            NSNumber *number = [NSNumber numberWithDouble:[device.lat doubleValue]];
            [mpara setObject:number forKey:GM_Argument_lat];
        }
        else {
            [mpara setObject:@0 forKey:GM_Argument_lat];
        }
    }
    
    //lng
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_lng]) {
        if (device.lng.length != 0) {
            NSNumber *number = [NSNumber numberWithDouble:[device.lng doubleValue]];
            [mpara setObject:number forKey:GM_Argument_lng];
        }
        else {
            [mpara setObject:@0 forKey:GM_Argument_lng];
        }
    }
    
    
    //speed
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_speed]) {
        if (device.speed.length != 0) {
            NSNumber *number = [NSNumber numberWithDouble:[device.speed doubleValue]];
            [mpara setObject:number forKey:GM_Argument_speed];
        }
        else {
            [mpara setObject:@0 forKey:GM_Argument_speed];
        }
    }
    
    
    //course
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_course]) {
        if (device.course.length != 0) {
            NSNumber *number = [NSNumber numberWithDouble:[device.course doubleValue]];
            [mpara setObject:number forKey:GM_Argument_course];
        }
        else {
            [mpara setObject:@0 forKey:GM_Argument_course];
        }
    }
    
    
    //tag1,2,3
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_tag1]) {
        if (device.tag1.length != 0) [mpara setObject:device.tag1 forKey:GM_Argument_tag1];
    }
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_tag2]) {
        if (device.tag2.length != 0) [mpara setObject:device.tag2 forKey:GM_Argument_tag2];
    }
    if ([GMTool getVariableWithClass:[device class] varName:GM_Argument_tag3]) {
        if (device.tag3.length != 0) [mpara setObject:device.tag3 forKey:GM_Argument_tag3];
    }

    return mpara;
}
/**
 *  历史位置信息获取
 *
 *  @param begintime 起始时间
 *  @param endtime   结束时间
 *  @param option    void (^GMOptionDict)(NSDictionary *dict)
 *  @param error    void (^GMOptionError)(NSError *error)
 */
- (GMHTTPRequestOperation *)acquireMyOwnDeviceHistoryLocationWithAppID:(NSString *)appID
                                                                 devID:(NSString *)devID
                                                             beginTime:(NSString *)begintime
                                                            andEndTime:(NSString *)endtime
                                                               mapType:(NSString *)mapType
                                                           numberLimit:(NSString *)limit
                                                             withBlock:(GMOptionDict)optionDict
                                                      withFailureBlock:(GMOptionError)optionError
{
    if (devID.length == 0 || appID.length == 0 || begintime == nil || endtime == nil) return nil;
    if ([begintime doubleValue] >= [endtime doubleValue]) return nil;
    NSDictionary *parameters = [self parameters:appID deviceId:devID beginTime:begintime endTime:endtime mapType:mapType numberLimit:limit];
    GMHTTPRequestOperation *operation = [self GET:GM_GetHistoryloc_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

/**
 *  设备实时位置信息获取(最新的位置信息)
 *
 *  @param appID       appID description
 *  @param devID       devID description
 *  @param optionDict  void (^GMOptionDict)(NSDictionary *dict)
 *  @param error    void (^GMOptionError)(NSError *error)
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)acquireMyOwnDeviceNewestLocationWithAppID:(NSString *)appID
                                                                devID:(NSString *)devID
                                                              mapType:(NSString *)mapType
                                                            withBlock:(GMOptionDict)optionDict
                                                     withFailureBlock:(GMOptionError)optionError
{
    if (devID.length == 0 || appID.length == 0) return nil;
    NSDictionary *parameters = [self parameters:appID deviceId:devID fenceId:nil mapType:mapType];
    GMHTTPRequestOperation *operation = [self GET:GM_Getloc_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}
/**
 *  多台设备(一台也可以)实时位置信息获取(最新的位置信息)
 *
 *  @param appID        appID description
 *  @param devIDArray   devIDArray 数组内容必须是NSString类型
 *  @param optionDict   void (^GMOptionDict)(NSDictionary *dict)
 *  @param error        void (^GMOptionError)(NSError *error)
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)acquireMyOwnDeviceNewestLocationWithAppID:(NSString *)appID
                                                           devIDArray:(NSArray *)devIDArray
                                                              mapType:(NSString *)mapType
                                                            withBlock:(GMOptionDict)optionDict
                                                     withFailureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || devIDArray.count == 0) return nil;
    for (id obj in devIDArray) {//若其中有一组信息不是NSString类型，则结束
        if (![obj isKindOfClass:[NSString class]]) return nil;
    }
    NSDictionary *parameters = @{GM_Argument_appid:appID,
                                 GM_Argument_devid:[self stringConnected:devIDArray]};
    GMHTTPRequestOperation *operation = [self GET:GM_Getloc_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

//2015.04.10 16:45
/**
 *  附近设备位置信息获取
 *
 *  @param appID       appID description
 *  @param devID       devID description
 *  @param distance    distance 距离
 *  @param mapType     mapType 地图类型 eg:BAIDU, GOOGLE
 *  @param optionDict  void (^GMOptionDict)(NSDictionary *dict)
 *  @param error       void (^GMOptionError)(NSError *error)
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)getNearbyDeviceInformationWithAppID:(NSString *)appID
                                                          devID:(NSString *)devID
                                                       distance:(NSString *)distance
                                                        mapType:(NSString *)mapType
                                                           tags:(NSDictionary *)tags
                                                      withBlock:(GMOptionDict)optionDict
                                               withFailureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || devID.length == 0 || distance.length == 0) return nil;
    NSDictionary *parameters = [self parameters:appID
                                       deviceId:devID
                                        fenceId:nil
                                       distance:distance
                                        mapType:mapType
                                           tags:tags];
    GMHTTPRequestOperation *operation = [self GET:GM_Getnearby_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}



#pragma mark - selfForFence

/**
 *  根据devID,查询设备的围栏
 *
 *  @param devID  围栏设备号
 *  @param appID  appID号
 *  @param option void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorOption void (^GMNetworkError)(NSError *error)
 */
- (GMHTTPRequestOperation *)acquireDeviceFenceWidthDevID:(NSString *)devID
                                                andAPPID:(NSString *)appID
                                                 mapType:(NSString *)mapType
                                         withOptionBlock:(GMOptionDict)optionDict
                                         andFailureBlock:(GMOptionError)optionError
{
    if (devID.length == 0 || appID.length == 0) return nil;
    NSDictionary *parameters= [self parameters:appID deviceId:devID fenceId:nil mapType:mapType];
    GMHTTPRequestOperation *operation = [self GET:GM_Get_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

/**
 *  根据fenceID,查询设备的围栏
 *
 *  @param fenceID  围栏号
 *  @param appID  appID号
 *  @param option void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorOption void (^GMNetworkError)(NSError *error)
 */
- (GMHTTPRequestOperation *)acquireDeviceFenceWidthFenceID:(NSString *)fenceID
                                                  andAPPID:(NSString *)appID
                                                   mapType:(NSString *)mapType
                                           withOptionBlock:(GMOptionDict)optionDict
                                           andFailureBlock:(GMOptionError)optionError
{
    if (fenceID.length == 0 || appID.length == 0) return nil;
    NSDictionary *parameters = [self parameters:appID deviceId:nil fenceId:fenceID mapType:mapType];
    GMHTTPRequestOperation *operation = [self GET:GM_Get_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

/**
 *  POST请求,创建一个设备的围栏(默认使用圆形围栏),报警阈值默认使用3
 *
 *  @param devID       devID description
 *  @param appID       appID description
 *  @param enable      enable 默认使用YES 0：关闭，1：开启
 *  @param coord       coord 经纬度
 *  @param radius      radius 围栏半径
 *  @param option      void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorOption void (^GMNetworkError)(NSError *error)
 */
- (GMHTTPRequestOperation *)createCircleFenceWithDevID:(NSString *)devID
                                              andAppID:(NSString *)appID
                                                enable:(BOOL)enable
                                                 coord:(CLLocationCoordinate2D)coord
                                                radius:(CGFloat)radius
                                       withOptionBlock:(GMOptionDict)optionDict
                                       andFailureBlock:(GMOptionError)OptionError
{
    return [self createCircleFenceWithDevID:devID andAppID:appID enable:enable threshold:3 getInFlag:YES getOutFlag:YES mapType:nil fenceName:nil coord:coord radius:radius withOptionBlock:optionDict andFailureBlock:OptionError];
}

- (GMHTTPRequestOperation *)createCircleFenceWithDevID:(NSString *)devID
                                              andAppID:(NSString *)appID
                                                enable:(BOOL)enable
                                             threshold:(int)threshold
                                             getInFlag:(BOOL)getIn
                                            getOutFlag:(BOOL)getOut
                                               mapType:(NSString *)mapType
                                             fenceName:(NSString *)fenceName
                                                 coord:(CLLocationCoordinate2D)coord
                                                radius:(CGFloat)radius
                                       withOptionBlock:(GMOptionDict)optionDict
                                       andFailureBlock:(GMOptionError)OptionError
{
    if (devID.length == 0 || appID.length == 0 || coord.latitude == 0 || coord.longitude == 0) return nil;
    NSString *area = [NSString stringWithFormat:@"%.6f,%.6f,%.f",coord.latitude,coord.longitude,radius];
    NSString *devInfo = [NSString stringWithFormat:@"%@,%d,%d",devID,getIn,getOut];
    NSDictionary *parameters = [self parameters:appID
                                          shape:@1
                                      threshold:@(threshold)
                                            are:area
                                         enable:@(enable)
                                        mapType:mapType
                                      fenceName:fenceName
                                        devInfo:devInfo];
    GMHTTPRequestOperation *operation = [self POST:GM_Create_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:OptionError];
    return operation;
}


- (GMHTTPRequestOperation *)createPolygonFenceWithDevID:(NSString *)devID
                                               andAppID:(NSString *)appID
                                                 enable:(BOOL)enable
                                              threshold:(int)threshold
                                              getInFlag:(BOOL)getIn
                                             getOutFlag:(BOOL)getOut
                                                mapType:(NSString *)mapType
                                              fenceName:(NSString *)fenceName
                                            polygonArea:(NSString *)area
                                        withOptionBlock:(GMOptionDict)optionDict
                                        andFailureBlock:(GMOptionError)OptionError
{
    if (devID.length == 0 || appID.length == 0 || area.length == 0) return nil;
    NSString *devInfo = [NSString stringWithFormat:@"%@,%d,%d",devID,getIn,getOut];
    NSDictionary *parameters = [self parameters:appID
                                          shape:@2
                                      threshold:@(threshold)
                                            are:area
                                         enable:@(enable)
                                        mapType:mapType
                                      fenceName:fenceName
                                        devInfo:devInfo];
    GMHTTPRequestOperation *operation = [self POST:GM_Create_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:OptionError];
    return operation;
}

/**
 *  删除围栏
 *
 *  @param appID      appID description
 *  @param fenceID    fenceID description
 *  @param dictOption void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorBlock void (^GMNetworkError)(NSError *error)
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)deleteDeviceFenceWithAppID:(NSString *)appID
                                               fenceID:(NSString *)fenceID
                                             withBlock:(GMOptionDict)optionDict
                                         withFailBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || fenceID.length == 0) return nil;
    NSDictionary *parameters = @{GM_Argument_appid:  appID,
                                 GM_Argument_fenceid:fenceID};
    GMHTTPRequestOperation *operation = [self GET:GM_Delete_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}


/**
 *  修改设备围栏参数
 *
 *  @param appID      appID description
 *  @param fenceID    fenceID description
 *  @param enable     enable description
 *  @param coord      coord description
 *  @param radius     radius description
 *  @param dictOption void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorBlock void (^GMNetworkError)(NSError *error)
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)modifyCircleFenceWithAppID:(NSString *)appID
                                               fenceID:(NSString *)fenceID
                                                enable:(BOOL)enable
                                             threshold:(int)threshold
                                               mapType:(NSString *)mapType
                                             fenceName:(NSString *)fenceName
                                                 coord:(CLLocationCoordinate2D)coord
                                                radius:(CGFloat)radius
                                             withBLock:(GMOptionDict)optionDict
                                      withFailureBLock:(GMOptionError)optionError
{
    if (appID.length == 0 || fenceID.length == 0 || coord.latitude == 0 || radius == 0) return nil;
    NSString *area = [NSString stringWithFormat:@"%.6f,%.6f,%.f",coord.latitude,coord.longitude,radius];
    NSDictionary *parameters = [self parameters:appID
                                        fenceId:fenceID
                                          shape:@1
                                      threshold:@(threshold)
                                            are:area
                                         enable:@(enable)
                                        mapType:mapType
                                      fenceName:fenceName
                                        devInfo:nil];
    GMHTTPRequestOperation *operation = [self POST:GM_Modify_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;
}

- (GMHTTPRequestOperation *)modifyPolygonFenceWithAppID:(NSString *)appID
                                                fenceID:(NSString *)fenceID
                                                 enable:(BOOL)enable
                                              threshold:(int)threshold
                                                mapType:(NSString *)mapType
                                              fenceName:(NSString *)fenceName
                                            polygonArea:(NSString *)area
                                              withBLock:(GMOptionDict)optionDict
                                       withFailureBLock:(GMOptionError)optionError
{
    if (appID.length == 0 || fenceID.length == 0 || area.length == 0) return nil;
    NSDictionary *parameters = [self parameters:appID
                                        fenceId:fenceID
                                          shape:@2
                                      threshold:@(threshold)
                                            are:area
                                         enable:@(enable)
                                        mapType:mapType
                                      fenceName:fenceName
                                        devInfo:nil];
    GMHTTPRequestOperation *operation = [self POST:GM_Modify_Fence_URL parameters:parameters dictBlock:optionDict errorBlock:optionError];
    return operation;

}


#pragma mark - selfForLogin
- (GMHTTPRequestOperation *)logoutWithAppID:(NSString *)appID
                                   deviceID:(NSString *)deviceID
                                  channelid:(NSString *)channelid
                                  withBlock:(GMOptionDict)optionDict
                           withFailureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || deviceID.length == 0) return nil;
    NSDictionary *parameters = @{GM_Argument_appid      :appID,
                                 GM_Argument_account    :deviceID,
                                 GM_Argument_access_type:@"inner"};
    NSMutableDictionary *mParameters = [NSMutableDictionary dictionaryWithDictionary:parameters];
    if (channelid.length != 0)  [mParameters setValue:channelid forKey:GM_Argument_cid];
    GMHTTPRequestOperation *operation = [self POST:GM_Logout_URL
                                        parameters:mParameters
                                         dictBlock:optionDict
                                        errorBlock:optionError];
    return operation;
}
//更新日期20150527
/**
 *  登录接口参数
 *
 *  @param appID      appID description
 *  @param deviceID    deviceID description
 *  @param signature     signature description通过MD5加密的token
 *  @param dictOption void (^GMNetworkOption)(NSDictionary *dict)
 *  @param errorBlock void (^GMNetworkError)(NSError *error)
 *
 *  @return GMHTTPRequestOperation
 */
- (GMHTTPRequestOperation *)loginWithAppID:(NSString *)appID
                                  deviceID:(NSString *)deviceID
                                 signature:(NSString *)signature
                                 channelid:(NSString *)channelid
                                 withBlock:(GMOptionDict)optionDict
                          withFailureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || deviceID.length == 0) return nil;
    
    NSDictionary *parameters = @{GM_Argument_appid      :appID,
                                 GM_Argument_account    :deviceID,
                                 GM_Argument_time       :GM_CurrentTime,
                                 GM_Argument_access_type:@"inner",
                                 GM_Argument_platform   :@"ios",
                                 GM_Argument_lang       :[self getSystemLangague],
                                 GM_Argument_timezone   :[NSString getNowDateTimezone]};
    NSMutableDictionary *mParameters = [NSMutableDictionary dictionaryWithDictionary:parameters];
    if (signature.length != 0)  [mParameters setValue:signature forKey:GM_Argument_signature];
    if (channelid.length != 0)  [mParameters setValue:channelid forKey:GM_Argument_cid];
    GMHTTPRequestOperation *operation = [self POST:GM_Login_URL
                                        parameters:mParameters
                                         dictBlock:optionDict
                                        errorBlock:optionError];
    return operation;
}
- (NSString *)getSystemLangague
{
    NSArray *languages      = [NSLocale preferredLanguages];
    NSString *curLanguage   = [languages firstObject];//zh-Hans简体中文 en英文 繁体 zh-Hant 香港 zh-HK
    NSRange range = [curLanguage rangeOfString:@"zh"];
    if (range.length != NSNotFound) return @"zh-CN";
    return @"en";
}
//http: //open-dev.gpsoo.net/1/device/login?appid=23&account=1212&time=1438249165&access_type=inner&signature=95bc32774daa33d196a1d972d0ce31e4
//TODO RegisterWithAppID
- (GMHTTPRequestOperation *)registerWithAppID:(NSString *)appID
                                         udid:(NSString *)udid
                                  deviceToken:(NSData *)deviceToken
                                 successBlock:(GMOptionDict)optionDict
                                 failureBlock:(GMOptionError)optionError
{
    if (appID.length == 0 || udid.length == 0 || deviceToken == nil) return nil;
    NSError *error = nil;
    NSData *data = [NSJSONSerialization dataWithJSONObject:[self iPhoneDeviceInfo] options:NSJSONWritingPrettyPrinted error:&error];
    NSString *devinfo = nil;
    if (!error) devinfo = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    
    NSDictionary *parameters = @{GM_Argument_appid      :appID,
                                 GM_Argument_fingerprint:udid,//唯一标识使用的key是devid,虽然不合理,容易产生误解
                                 GM_Argument_platform   :@"ios",
                                 GM_Argument_apnsToken  :deviceToken};
    NSMutableDictionary *mParameters = [NSMutableDictionary dictionaryWithDictionary:parameters];
    if (devinfo.length != 0) [mParameters setValue:devinfo forKey:GM_Argument_devinfo];
    GMHTTPRequestOperation *operation = [self POST:GM_APNS_Provider_URL parameters:mParameters dictBlock:optionDict errorBlock:optionError];
    return operation;

}
- (NSDictionary *)iPhoneDeviceInfo
{
    NSMutableDictionary *mDict = [NSMutableDictionary dictionary];
    NSString *appVersion    = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
    UIDevice *myDevice      = [UIDevice currentDevice];
    NSString *deviceName    = myDevice.name;
    NSString *deviceModel   = [NSString iPhoneDeviceNumber];//myDevice.model;
    NSString *sysName       = myDevice.systemName;
    NSString *sysVersion    = myDevice.systemVersion;
    NSArray *languages      = [NSLocale preferredLanguages];
    NSString *curLanguage   = [languages firstObject];//zh-Hans简体中文 en英文
    if (appVersion.length != 0)  [mDict setValue:appVersion  forKey:@"appVersion"];
    if (deviceName.length != 0)  [mDict setValue:deviceName  forKey:@"deviceName"];
    if (deviceModel.length != 0) [mDict setValue:deviceModel forKey:@"deviceModel"];
    if (sysName.length != 0)     [mDict setValue:sysName     forKey:@"deviceSystemName"];
    if (sysVersion.length != 0)  [mDict setValue:sysVersion  forKey:@"deviceSystemVersion"];
    if (curLanguage.length != 0) [mDict setValue:curLanguage forKey:@"language"];
    return mDict;
}

#pragma mark -  NSMutableDictionary
- (NSDictionary *)parameters:(NSString *)appid
                    deviceId:(NSString *)deviceId
                   beginTime:(NSString *)begintime
                     endTime:(NSString *)endTime
                     mapType:(NSString *)mapType
                 numberLimit:(NSString *)limit
{
    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
    if (appid.length != 0) {
        [parameters setObject:appid forKey:GM_Argument_appid];
    }
    if (deviceId.length != 0) {
        [parameters setObject:deviceId forKey:GM_Argument_devid];
    }
    if (begintime.length != 0) {
        [parameters setObject:begintime forKey:GM_Argument_begin_time];
    }
    if (endTime.length != 0) {
        [parameters setObject:endTime forKey:GM_Argument_end_time];
    }
    if (mapType.length != 0) {
        [parameters setObject:mapType forKey:GM_Argument_map_type];
    }
    if (limit.length != 0) {
        [parameters setObject:limit forKey:GM_Argument_limit];
    }
    return parameters;
}

- (NSDictionary *)parameters:(NSString *)appid
                    deviceId:(NSString *)deviceId
                     fenceId:(NSString *)fenceId
                     mapType:(NSString *)mapType
{
    return [self parameters:appid deviceId:deviceId fenceId:fenceId distance:nil mapType:mapType tags:nil];
}
- (NSDictionary *)parameters:(NSString *)appid
                    deviceId:(NSString *)deviceId
                     fenceId:(NSString *)fenceId
                    distance:(NSString *)distance
                     mapType:(NSString *)mapType
                        tags:(NSDictionary *)tags
{
    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
    if (appid.length != 0) {
        [parameters setObject:appid forKey:GM_Argument_appid];
    }
    if (deviceId.length != 0) {
        [parameters setObject:deviceId forKey:GM_Argument_devid];
    }
    if (fenceId.length != 0) {
        [parameters setObject:fenceId forKey:GM_Argument_fenceid];
    }
    if (distance.length != 0) {
        [parameters setObject:distance forKey:GM_Argument_distance];
    }
    if (mapType.length != 0) {
        [parameters setObject:mapType forKey:GM_Argument_map_type];
    }
    
    if (tags.count != 0) {
        for (NSString *key in tags) {
            if ([key isEqualToString:GM_Argument_tag1]) {
                [parameters setObject:[tags objectForKey:key] forKey:GM_Argument_tag1];
            }
            else if ([key isEqualToString:GM_Argument_tag2]) {
                [parameters setObject:[tags objectForKey:key] forKey:GM_Argument_tag2];
            }
            else if ([key isEqualToString:GM_Argument_tag3]) {
                [parameters setObject:[tags objectForKey:key] forKey:GM_Argument_tag3];
            }
        }
    }
    return parameters;
}
- (NSDictionary *)parameters:(NSString *)appid
                       shape:(NSNumber *)shape
                   threshold:(NSNumber *)threshold
                         are:(NSString *)area
                      enable:(NSNumber *)enable
                     mapType:(NSString *)mapType
                   fenceName:(NSString *)fenceName
                     devInfo:(NSString *)devInfo
{
    return [self parameters:appid fenceId:nil shape:shape threshold:threshold are:area enable:enable mapType:mapType fenceName:fenceName devInfo:devInfo];
}
- (NSDictionary *)parameters:(NSString *)appid
                     fenceId:(NSString *)fenceId
                       shape:(NSNumber *)shape
                   threshold:(NSNumber *)threshold
                         are:(NSString *)area
                      enable:(NSNumber *)enable
                     mapType:(NSString *)mapType
                   fenceName:(NSString *)fenceName
                     devInfo:(NSString *)devInfo
{
    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
    if (appid.length != 0) {
        [parameters setObject:appid forKey:GM_Argument_appid];
    }
    if (fenceId.length != 0) {
        [parameters setObject:fenceId forKey:GM_Argument_fenceid];
    }
    if (shape) {
        [parameters setObject:shape forKey:GM_Argument_shape];
    }
    if (threshold) {
        [parameters setObject:threshold forKey:GM_Argument_threshold];
    }
    if (area.length != 0) {
        [parameters setObject:area forKey:GM_Argument_area];
    }
    if (enable) {
        [parameters setObject:enable forKey:GM_Argument_enable];
    }
    if (mapType.length != 0) {
        [parameters setObject:mapType forKey:GM_Argument_map_type];
    }
    if (fenceName.length != 0) {
        [parameters setObject:fenceName forKey:GM_Argument_fenceName];
    }
    if (devInfo.length != 0) {
        [parameters setObject:devInfo forKey:GM_Argument_devinfo];
    }
    return parameters;
}

- (NSString *)stringConnected:(NSArray *)array
{
    NSString *string = nil;
    int i = 1;
    for (NSString *devID in array) {
        if (i == 1) {
            string = devID;
        }
        else{
            NSString *aaaa = [@"," stringByAppendingString:devID];
            string = [string stringByAppendingString:aaaa];
        }
        i --;
    }
    return string;
}
@end




