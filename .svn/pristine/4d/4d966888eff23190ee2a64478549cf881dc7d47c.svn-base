//
//  GMFenceInfo.m
//  New_Simplify
//
//  Created by Kowloon on 15/7/20.
//  Copyright (c) 2015å¹´ Goome. All rights reserved.
//

#import "GMFenceInfo.h"
#import "GMDevInOut.h"
#import <objc/runtime.h>
#import "GMConstant.h"
@implementation GMFenceInfo

- (GMDevInOut *)devInOut
{
    if (!_devInOut) {
        _devInOut = [[GMDevInOut alloc] init];
    }
    return _devInOut;
}

- (instancetype)initWithDeviceDict:(NSDictionary *)dict
{
    self = [super init];
    if (self) {
        _devInOut          = [[GMDevInOut alloc] init];
        _area              = [NSString stringWithFormat:@"%@",dict[GM_Argument_area]];
        _devInOut.devid    = [NSString stringWithFormat:@"%@",dict[GM_Argument_devid]];
        _enable            = [NSString stringWithFormat:@"%@",dict[GM_Argument_enable]];
        _fenceid           = [NSString stringWithFormat:@"%@",dict[GM_Argument_fenceid]];
        _devInOut.dev_in   = [NSString stringWithFormat:@"%@",dict[GM_Argument_in]];
        _devInOut.dev_out  = [NSString stringWithFormat:@"%@",dict[GM_Argument_out]];
        _name              = [NSString stringWithFormat:@"%@",dict[GM_Argument_name]];
        _shape             = [NSString stringWithFormat:@"%@",dict[GM_Argument_shape]];
        _threshold         = [NSString stringWithFormat:@"%@",dict[GM_Argument_threshold]];
        _update_time       = [NSString stringWithFormat:@"%@",dict[GM_Argument_update_time]];
    }
    return self;
}

- (instancetype)initWithFenceDict:(NSDictionary *)dict
{
    self = [super init];
    if (self) {
        
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super init];
    if (self) {
        unsigned int outCount, i;
        Ivar *ivars = class_copyIvarList([self class], &outCount);
        for (i = 0; i < outCount; i++) {
            Ivar property = ivars[i];
            NSString *keyName = [NSString stringWithCString:ivar_getName(property) encoding:NSUTF8StringEncoding];
            id value = [aDecoder decodeObjectForKey:keyName];
            [self setValue:value forKey:keyName];
        }
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder
{
    unsigned int outCount, i;
    Ivar *ivars = class_copyIvarList([self class], &outCount);
    for (i = 0; i < outCount; i++) {
        Ivar property = ivars[i];
        NSString *keyName = [NSString stringWithCString:ivar_getName(property) encoding:NSUTF8StringEncoding];
        id value = [self valueForKey:keyName];
        [aCoder encodeObject:value forKey:keyName];
    }
}
- (void)dealloc
{
    NSLog(@"%@->dealloc",NSStringFromClass([self class]));
}
@end
